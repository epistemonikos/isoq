/* eslint-disable */
module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function () {
  function peg$subclass (child, parent) {
    function Ctor () { this.constructor = child }
    Ctor.prototype = parent.prototype
    child.prototype = new Ctor()
  }

  function Peg$SyntaxError (message, expected, found, location) {
    this.message = message
    this.expected = expected
    this.found = found
    this.location = location
    this.name = 'SyntaxError'

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, Peg$SyntaxError)
    }
  }

  peg$subclass(Peg$SyntaxError, Error)

  Peg$SyntaxError.buildMessage = function (expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
      literal: function (expectation) {
        return '"' + literalEscape(expectation.text) + '"'
      },

      'class': function (expectation) {
        var escapedParts = ''
        let i

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array
            ? classEscape(expectation.parts[i][0]) + '-' + classEscape(expectation.parts[i][1])
            : classEscape(expectation.parts[i])
        }

        return '[' + (expectation.inverted ? '^' : '') + escapedParts + ']'
      },

      any: function (expectation) {
        return 'any character'
      },

      end: function (expectation) {
        return 'end of input'
      },

      other: function (expectation) {
        return expectation.description
      }
    }

    function hex (ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase()
    }

    function literalEscape (s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
    }

    function classEscape (s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g, '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, function (ch) { return '\\x0' + hex(ch) })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return '\\x' + hex(ch) })
    }

    function describeExpectation (expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)
    }

    function describeExpected (expected) {
      var descriptions = new Array(expected.length)
      let i, j

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i])
      }

      descriptions.sort()

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i]
            j++
          }
        }
        descriptions.length = j
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0]

        case 2:
          return descriptions[0] + ' or ' + descriptions[1]

        default:
          return descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1]
      }
    }

    function describeFound (found) {
      return found ? '"' + literalEscape(found) + '"' : 'end of input'
    }

    return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.'
  }

  function peg$parse (input, options) {
    options = options !== void 0 ? options : {}

    var peg$FAILED = {}
    var peg$startRuleFunctions = { start: peg$parsestart }
    var peg$startRuleFunction = peg$parsestart

    var peg$c0 = function () { return ',' }
    var peg$c1 = function (sv) { return sv }
    var peg$c2 = function () { return '\t' }
    var peg$c3 = /^[\n\r]/
    var peg$c4 = peg$classExpectation(['\n', '\r'], false, false)
    var peg$c5 = function (first, data) { return data }
    var peg$c6 = function (first, rest) { rest.unshift(first); return rest }
    var peg$c7 = peg$anyExpectation()
    var peg$c8 = function (first, char) { return char === separator }
    var peg$c9 = function (first, char, text) { return text }
    var peg$c10 = function (first, rest) { return !!first || rest.length }
    var peg$c11 = '"'
    var peg$c12 = peg$literalExpectation('"', false)
    var peg$c13 = function (text) { return text.join('') }
    var peg$c14 = /^[^\n\r]/
    var peg$c15 = peg$classExpectation(['\n', '\r'], true, false)
    var peg$c16 = function (char) { return char !== separator }
    var peg$c17 = function (char) { return char }
    var peg$c18 = function () { return '"' }
    var peg$c19 = /^[^"]/
    var peg$c20 = peg$classExpectation(['"'], true, false)

    let peg$currPos = 0
    let peg$savedPos = 0
    let peg$posDetailsCache = [{ line: 1, column: 1 }]
    let peg$maxFailPos = 0
    let peg$maxFailExpected = []
    let peg$silentFails = 0

    var peg$result

    if ('startRule' in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error('Can\'t start parsing from rule "' + options.startRule + '".')
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule]
    }

    function peg$literalExpectation (text, ignoreCase) {
      return { type: 'literal', text: text, ignoreCase: ignoreCase }
    }

    function peg$classExpectation (parts, inverted, ignoreCase) {
      return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase }
    }

    function peg$anyExpectation () {
      return { type: 'any' }
    }

    function peg$endExpectation () {
      return { type: 'end' }
    }

    function peg$computePosDetails (pos) {
      var details = peg$posDetailsCache[pos]
      let p = 0

      if (details) {
        return details
      } else {
        p = pos - 1
        while (!peg$posDetailsCache[p]) {
          p--
        }

        details = peg$posDetailsCache[p]
        details = {
          line: details.line,
          column: details.column
        }

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++
            details.column = 1
          } else {
            details.column++
          }

          p++
        }

        peg$posDetailsCache[pos] = details
        return details
      }
    }

    function peg$computeLocation (startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos)
      var endPosDetails = peg$computePosDetails(endPos)

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column
        }
      }
    }

    function peg$fail (expected) {
      if (peg$currPos < peg$maxFailPos) { return }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos
        peg$maxFailExpected = []
      }

      peg$maxFailExpected.push(expected)
    }

    function peg$buildStructuredError (expected, found, location) {
      return new Peg$SyntaxError(
        Peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      )
    }

    function peg$parsestart () {
      var s0

      s0 = peg$parsecomma()

      return s0
    }

    function peg$parsecomma () {
      var s0, s1, s2

      s0 = peg$currPos
      peg$savedPos = peg$currPos
      s1 = peg$c0()
      if (s1) {
        s1 = void 0
      } else {
        s1 = peg$FAILED
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesv()
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c1(s2)
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsesv () {
      var s0, s1, s2, s3, s4, s5, s6

      s0 = peg$currPos
      s1 = []
      if (peg$c3.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos)
        peg$currPos++
      } else {
        s2 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c4) }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2)
        if (peg$c3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c4) }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseline()
        if (s2 !== peg$FAILED) {
          s3 = []
          s4 = peg$currPos
          s5 = []
          if (peg$c3.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s6 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c4) }
          }
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6)
              if (peg$c3.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s6 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c4) }
              }
            }
          } else {
            s5 = peg$FAILED
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseline()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s4
              s5 = peg$c5(s2, s6)
              s4 = s5
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          } else {
            peg$currPos = s4
            s4 = peg$FAILED
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4)
            s4 = peg$currPos
            s5 = []
            if (peg$c3.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s6 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c4) }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6)
                if (peg$c3.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos)
                  peg$currPos++
                } else {
                  s6 = peg$FAILED
                  if (peg$silentFails === 0) { peg$fail(peg$c4) }
                }
              }
            } else {
              s5 = peg$FAILED
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseline()
              if (s6 !== peg$FAILED) {
                peg$savedPos = s4
                s5 = peg$c5(s2, s6)
                s4 = s5
              } else {
                peg$currPos = s4
                s4 = peg$FAILED
              }
            } else {
              peg$currPos = s4
              s4 = peg$FAILED
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = []
            if (peg$c3.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos)
              peg$currPos++
            } else {
              s5 = peg$FAILED
              if (peg$silentFails === 0) { peg$fail(peg$c4) }
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5)
              if (peg$c3.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos)
                peg$currPos++
              } else {
                s5 = peg$FAILED
                if (peg$silentFails === 0) { peg$fail(peg$c4) }
              }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0
              s1 = peg$c6(s2, s3)
              s0 = s1
            } else {
              peg$currPos = s0
              s0 = peg$FAILED
            }
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parseline () {
      var s0, s1, s2, s3, s4, s5, s6

      s0 = peg$currPos
      s1 = peg$parsefield()
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$currPos
        if (input.length > peg$currPos) {
          s4 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s4 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c7) }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = peg$currPos
          s5 = peg$c8(s1, s4)
          if (s5) {
            s5 = void 0
          } else {
            s5 = peg$FAILED
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsefield()
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3
              s4 = peg$c9(s1, s4, s6)
              s3 = s4
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        } else {
          peg$currPos = s3
          s3 = peg$FAILED
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$currPos
          if (input.length > peg$currPos) {
            s4 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s4 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c7) }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = peg$currPos
            s5 = peg$c8(s1, s4)
            if (s5) {
              s5 = void 0
            } else {
              s5 = peg$FAILED
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsefield()
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3
                s4 = peg$c9(s1, s4, s6)
                s3 = s4
              } else {
                peg$currPos = s3
                s3 = peg$FAILED
              }
            } else {
              peg$currPos = s3
              s3 = peg$FAILED
            }
          } else {
            peg$currPos = s3
            s3 = peg$FAILED
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = peg$currPos
          s3 = peg$c10(s1, s2)
          if (s3) {
            s3 = void 0
          } else {
            s3 = peg$FAILED
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c6(s1, s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }

      return s0
    }

    function peg$parsefield () {
      var s0, s1, s2, s3, s4

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c11
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c12) }
      }
      if (s1 !== peg$FAILED) {
        s2 = []
        s3 = peg$parsechar()
        while (s3 !== peg$FAILED) {
          s2.push(s3)
          s3 = peg$parsechar()
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c11
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c12) }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0
            s1 = peg$c13(s2)
            s0 = s1
          } else {
            peg$currPos = s0
            s0 = peg$FAILED
          }
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos
        s1 = []
        s2 = peg$currPos
        if (peg$c14.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s3 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c15) }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = peg$currPos
          s4 = peg$c16(s3)
          if (s4) {
            s4 = void 0
          } else {
            s4 = peg$FAILED
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s2
            s3 = peg$c17(s3)
            s2 = s3
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        } else {
          peg$currPos = s2
          s2 = peg$FAILED
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2)
          s2 = peg$currPos
          if (peg$c14.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos)
            peg$currPos++
          } else {
            s3 = peg$FAILED
            if (peg$silentFails === 0) { peg$fail(peg$c15) }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = peg$currPos
            s4 = peg$c16(s3)
            if (s4) {
              s4 = void 0
            } else {
              s4 = peg$FAILED
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s2
              s3 = peg$c17(s3)
              s2 = s3
            } else {
              peg$currPos = s2
              s2 = peg$FAILED
            }
          } else {
            peg$currPos = s2
            s2 = peg$FAILED
          }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c13(s1)
        }
        s0 = s1
      }

      return s0
    }

    function peg$parsechar () {
      var s0, s1, s2

      s0 = peg$currPos
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c11
        peg$currPos++
      } else {
        s1 = peg$FAILED
        if (peg$silentFails === 0) { peg$fail(peg$c12) }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s2 = peg$c11
          peg$currPos++
        } else {
          s2 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c12) }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0
          s1 = peg$c18()
          s0 = s1
        } else {
          peg$currPos = s0
          s0 = peg$FAILED
        }
      } else {
        peg$currPos = s0
        s0 = peg$FAILED
      }
      if (s0 === peg$FAILED) {
        if (peg$c19.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos)
          peg$currPos++
        } else {
          s0 = peg$FAILED
          if (peg$silentFails === 0) { peg$fail(peg$c20) }
        }
      }

      return s0
    }

    var separator = ','

    peg$result = peg$startRuleFunction()

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation())
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      )
    }
  }

  return {
    SyntaxError: Peg$SyntaxError,
    parse: peg$parse
  }
})()
